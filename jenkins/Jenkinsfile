
pipeline {
    agent any

    parameters {
        string(name: 'VPC_NAME', defaultValue: 'double-digit-vpc', description: 'Name of VPC Created')
        string(name: 'REGION', defaultValue: 'us-east-1', description:'worspace to use in Terraform')
        string(name: 'SGSTACK', defaultValue: 'security-group-by-vivek', description:'worspace to use in Terraform')
        string(name: 'ELBSTACK', defaultValue: 'security-group-by-vivek', description:'worspace to use in Terraform')
        string(name: 'ASGSTACK', defaultValue: 'asg-webapp-by-vivek', description:'worspace to use in Terraform')
    }
    stages {
        stage('web-app-security'){
            steps {
                dir('aws-cloudformation/security/'){
                    script {
                        def apply = true
                        def status = null
                        try {
                            status = sh(script: "aws cloudformation describe-stacks --region ${params.REGION} \
                            --stack-name ${params.SGSTACK} --query Stacks[0].StackStatus --output text", returnStdout: true)
                            apply = true
                        } catch(err){
                             apply = false
                             sh "echo Creating Security Group for Web-App"
                             sh "aws cloudformation --region ${params.REGION} validate-template --template-body file://aws-infra-security-group.json"
                             sh "aws cloudformation --region ${params.REGION} create-stack --stack-name ${params.SGSTACK} --template-body \
                                file://aws-infra-security-group.json --parameters ParameterKey=VPCStackName,ParameterValue=vpc-subnet-network-by-vivek"
                             sh "aws cloudformation --region ${params.REGION} wait stack-create-complete --stack-name ${params.SGSTACK}"
                             sh "aws cloudformation --region ${params.REGION} describe-stack-events --stack-name ${params.SGSTACK} \
                                --query 'StackEvents[].[{Resource:LogicalResourceId,Status:ResourceStatus,Reason:ResourceStatusReason}]' \
                                --output table"
                        }
                        if(apply){
                            try {
                                 sh "echo Stack exists, attempting update..."
                                 sh "aws cloudformation --region ${params.REGION} update-stack --stack-name \
                                    ${params.SGSTACK} --template-body file://aws-infra-security-group.json \
                                    --parameters ParameterKey=VPCStackName,ParameterValue=vpc-subnet-network-by-vivek"
                            } catch(err){
                                sh "echo Finished create/update - no updates to be performed"
                            }
                        }
                        sh "echo Finished create/update successfully!"
                    }
                }
            }
        }
         stage('web-app-elb'){
            steps {
                dir('aws-cloudformation/loadbalancing/'){
                    script {
                        def apply = true
                        def status = null
                        try {
                            status = sh(script: "aws cloudformation describe-stacks --region ${params.REGION} \
                                --stack-name ${params.ELBSTACK} --query Stacks[0].StackStatus --output text", returnStdout: true)
                            apply = true
                        } catch(err){
                            apply = false
                            sh 'echo Creating ELB for web application....'
                            sh "aws cloudformation --region ${params.REGION} validate-template --template-body file://aws-elb-for-ec2.json"
                            sh "aws cloudformation --region ${params.REGION} create-stack --stack-name elb-by-vivek --template-body \
                                file://aws-elb-for-ec2.json --parameters file://parameter/aws-elb-parameters.json"
                            sh "aws cloudformation --region ${params.REGION} wait stack-create-complete --stack-name elb-by-vivek"
                            sh "aws cloudformation --region ${params.REGION} describe-stack-events --stack-name security-group-by-vivek \
                                --query 'StackEvents[].[{Resource:LogicalResourceId,Status:ResourceStatus,Reason:ResourceStatusReason}]' \
                                --output table"
                        }
                        if(apply){
                            try {
                                sh "echo Stack exists, attempting update..."
                                sh "aws cloudformation --region ${params.REGION} update-stack --stack-name \
                                    ${params.ELBSTACK} --template-body file://aws-elb-for-ec2.json \
                                    --parameters ParameterKey=VPCStackName,ParameterValue=vpc-subnet-network-by-vivek"
                            } catch(err){
                                sh "echo Finished create/update - no updates to be performed"
                            }
                        }
                        sh "echo Finished create/update successfully!"
                    }
                }
            }
         }
         stage('web-app-asg'){
            steps {
                dir('aws-cloudformation/elasticity/'){
                    script {
                        def apply = true
                        def status = null
                        try {
                            status = sh(script: "aws cloudformation describe-stacks --region ${params.REGION} \
                                --stack-name ${params.ASGSTACK} --query Stacks[0].StackStatus --output text", returnStdout: true)
                            apply = true
                        } catch(err){
                            apply = false
                            sh 'echo Creating ASG group and configuration for web application....'
                            sh "aws cloudformation --region ${params.REGION} validate-template --template-body file://aws-asg-for-ec2.json"
                            sh "aws cloudformation --region ${params.REGION} create-stack --stack-name asg-webapp-by-vivek --template-body \
                                file://aws-asg-for-ec2.json --capabilities CAPABILITY_NAMED_IAM \
                                --parameters file://parameter/aws-asg-parameters.json"
                            sh "aws cloudformation --region ${params.REGION} wait stack-create-complete --stack-name asg-webapp-by-vivek"
                            sh "aws cloudformation --region ${params.REGION} describe-stack-events --stack-name asg-webapp-by-vivek \
                                --query 'StackEvents[].[{Resource:LogicalResourceId,Status:ResourceStatus,Reason:ResourceStatusReason}]' \
                                --output table"
                        }
                        if(apply){
                            try {
                                sh "echo Stack exists, attempting update..."
                                sh "aws cloudformation --region ${params.REGION} update-stack --stack-name \
                                    ${params.ASGSTACK} --template-body file://aws-asg-for-ec2.json \
                                    --parameters ParameterKey=VPCStackName,ParameterValue=vpc-subnet-network-by-vivek"
                            } catch(err){
                                sh "echo Finished create/update - no updates to be performed"
                            }
                        }
                        sh "echo Finished create/update successfully!"
                    }
                }
            }
         }
    }
}